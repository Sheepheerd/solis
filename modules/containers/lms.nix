# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."lms" = {
    image = "epoupon/lms";
    volumes = [
      "/mnt/one-t-ssd/lms/data:/var/lms:rw"
      "/mnt/one-t-ssd/lms/music:/music:ro"
      "/mnt/one-t-ssd/lms/lms.conf:/etc/lms-custom.conf:ro"
    ];
    ports = [ "100.113.25.38:5082:5082/tcp" ];
    user = "1000:1000";
    log-driver = "journald";
    extraOptions = [ "--network-alias=lms" "--network=lms_default" ];
  };
  systemd.services."podman-lms" = {
    serviceConfig = { Restart = lib.mkOverride 90 "always"; };
    after = [ "podman-network-lms_default.service" ];
    requires = [ "podman-network-lms_default.service" ];
    partOf = [ "podman-compose-lms-root.target" ];
    wantedBy = [ "podman-compose-lms-root.target" ];
  };

  # Networks
  systemd.services."podman-network-lms_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f lms_default";
    };
    script = ''
      podman network inspect lms_default || podman network create lms_default
    '';
    partOf = [ "podman-compose-lms-root.target" ];
    wantedBy = [ "podman-compose-lms-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-lms-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
