# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."linkwarden-linkwarden" = {
    image = "ghcr.io/linkwarden/linkwarden:latest";
    environment = {
      "DATABASE_URL" = "postgresql://postgres:postgres@postgres:5432/postgres";
      "NEXTAUTH_SECRET" = "super_secret";
      "NEXTAUTH_URL" = "http://solis:3000/api/v1/auth";
      "POSTGRES_PASSWORD" = "postgres";
    };
    # environmentFiles = [ "/home/sheep/github/100.113.25.38/modules/containers/.env" ];
    volumes = [ "/mnt/one-t-ssd/linkwarden/data:/data/data:rw" ];
    ports = [ "100.113.25.38:3000:3000/tcp" ];
    dependsOn = [ "linkwarden-postgres" ];
    log-driver = "journald";
    extraOptions =
      [ "--network-alias=linkwarden" "--network=linkwarden_default" ];
  };
  systemd.services."podman-linkwarden-linkwarden" = {
    serviceConfig = { Restart = lib.mkOverride 90 "always"; };
    after = [ "podman-network-linkwarden_default.service" ];
    requires = [ "podman-network-linkwarden_default.service" ];
    partOf = [ "podman-compose-linkwarden-root.target" ];
    wantedBy = [ "podman-compose-linkwarden-root.target" ];
  };
  virtualisation.oci-containers.containers."linkwarden-postgres" = {
    image = "postgres:16-alpine";
    environment = {
      "NEXTAUTH_SECRET" = "super_secret";
      "NEXTAUTH_URL" = "http://solis:3000/api/v1/auth";
      "POSTGRES_PASSWORD" = "postgres";
    };
    # environmentFiles = [ "/home/sheep/github/100.113.25.38/modules/containers/.env" ];
    volumes =
      [ "/mnt/one-t-ssd/linkwarden/postgres:/var/lib/postgresql/data:rw" ];
    log-driver = "journald";
    extraOptions =
      [ "--network-alias=postgres" "--network=linkwarden_default" ];
  };
  systemd.services."podman-linkwarden-postgres" = {
    serviceConfig = { Restart = lib.mkOverride 90 "always"; };
    after = [ "podman-network-linkwarden_default.service" ];
    requires = [ "podman-network-linkwarden_default.service" ];
    partOf = [ "podman-compose-linkwarden-root.target" ];
    wantedBy = [ "podman-compose-linkwarden-root.target" ];
  };

  # Networks
  systemd.services."podman-network-linkwarden_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f linkwarden_default";
    };
    script = ''
      podman network inspect linkwarden_default || podman network create linkwarden_default
    '';
    partOf = [ "podman-compose-linkwarden-root.target" ];
    wantedBy = [ "podman-compose-linkwarden-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-linkwarden-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
