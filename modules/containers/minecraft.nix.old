# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."minecraft-hr-mc" = {
    image = "itzg/minecraft-server:stable";
    environment = {
      "TYPE" = "FABRIC";
      # "MODPACK_PLATFORM" = "MODRINTH";
      # "MODRINTH_MODPACK" =
      # "https://cdn.modrinth.com/data/yqI9DldQ/versions/8WxsDORG/hermitcraft-server.mrpack";
      "DIFFICULTY" = "hard";
      "EULA" = "TRUE";
      "FORCE_WORLD_COPY" = "true";
      "MAX_MEMORY" = "8G";
      "VIEW_DISTANCE" = "15";
      "ONLINE_MODE" = "TRUE";
      # "ENABLE_AUTOPAUSE" = "false";
    };
    volumes = [
      "/mnt/one-t-ssd/minecraft/worlds/helproom/data/:/data:rw"
      "/mnt/one-t-ssd/minecraft/worlds/helproom/data/plugins:/plugins:rw"
    ];
    ports = [
      "100.113.25.38:25565:25565/tcp"
      "100.113.25.38:24454:24454/udp"
      "10.147.17.9:25565:25565/tcp"
      "10.147.17.9:24454:24454/udp"
    ];
    log-driver = "journald";
    extraOptions = [ "--network-alias=mc" "--network=minecraft-hr_default" ];
  };
  systemd.services."podman-minecraft-hr-mc" = {
    serviceConfig = { Restart = lib.mkOverride 90 "always"; };
    after = [ "podman-network-minecraft-hr_default.service" ];
    requires = [ "podman-network-minecraft-hr_default.service" ];
    partOf = [ "podman-compose-minecraft-hr-root.target" ];
    wantedBy = [ "podman-compose-minecraft-hr-root.target" ];
  };

  # Networks
  systemd.services."podman-network-minecraft-hr_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f minecraft-hr_default";
    };
    script = ''
      podman network inspect minecraft-hr_default || podman network create minecraft-hr_default
    '';
    partOf = [ "podman-compose-minecraft-hr-root.target" ];
    wantedBy = [ "podman-compose-minecraft-hr-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-minecraft-hr-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
