# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."jellyfin" = {
    image = "docker.io/jellyfin/jellyfin";
    volumes = [
      "/mnt/two-t-hdd/jellyfin/cache:/cache:rw"
      "/mnt/two-t-hdd/jellyfin/config:/config:rw"
      "/mnt/two-t-hdd/jellyfin/media:/media:rw"
      # "/mnt/two-t-hdd/jellyfin/media2:/media2:ro"
      "/mnt/one-t-ssd/lms/music/:/media2:ro"
      "/run/current-system/sw/share/X11/:/usr/local/share/fonts/custom:ro"
    ];
    ports = [ "100.113.25.38:8096:8096/tcp" ];
    # user = "sheep:users";
    log-driver = "journald";
    extraOptions =
      [ "--add-host=host.docker.internal:host-gateway" "--network=host" ];
  };
  systemd.services."podman-jellyfin" = {
    serviceConfig = { Restart = lib.mkOverride 90 "always"; };
    partOf = [ "podman-compose-jellyfin-root.target" ];
    wantedBy = [ "podman-compose-jellyfin-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-jellyfin-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
